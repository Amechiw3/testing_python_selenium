trigger:
  branches:
    include:
      - main  # Configura la rama que dispara el pipeline

variables:
  pythonVersion: '3.8'  # Define la versión de Python
  reportsHTMLPath: 'reports/html/report'
  reportsXMLPath: 'reports/xml/report'

stages:
  - stage: BuildAndTest
    jobs:
      - job: InstallAndTest
        pool:
          vmImage: 'windows-latest'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
              addToPath: true

          - task: Cache@2
            inputs:
              key: 'pip | "$(Agent.OS)" | requirements.txt'
              restoreKeys: |
                pip | "$(Agent.OS)"
              path: $(Pipeline.Workspace)/.pip-cache
            displayName: 'Cache de dependencias de pip'

          - script: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt --cache-dir $(Pipeline.Workspace)/.pip-cache
            displayName: 'Instala dependencias'

          - script: |
              pip install flake8 black pytest-cov pytest-xdist safety bandit
              flake8 src
              black --check src
              safety check --full-report
              bandit -r src
              pytest --junitxml=$(reportsXMLPath).xml --html=$(reportsHTMLPath).html --self-contained-html --cov=src --cov-report=xml:reports/coverage.xml -n auto
            displayName: 'Ejecuta validaciones y pruebas'

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/reports/*.xml'
              failTaskOnFailedTests: true

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: 'reports/coverage.xml'
              failIfCoverageEmpty: true

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: 'reports'
              artifact: 'TestReports'
            displayName: 'Publica artefactos del reporte'

  - stage: Deploy
    dependsOn: BuildAndTest
    jobs:
      - job: Deploy
        pool:
          vmImage: 'windows-latest'
        steps:
          - script: |
              echo "Implementando la aplicación..."
            displayName: 'Despliegue de la aplicación'