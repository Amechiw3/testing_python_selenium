trigger:
  branches:
    include:
      - main  # Configura la rama que dispara el pipeline

variables:
  pythonVersion: '3.8'  # Define la versión de Python
  reportsPath: 'reports/html/report'

stages:
  - build
  - test
  - deploy

# Plantilla de trabajo para instalar dependencias y ejecutar pruebas
jobs:
  - job: InstallAndTest
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(pythonVersion)'
          addToPath: true

      - script: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        displayName: 'Instala dependencias'

      - script: |
          pytest --junitxml=$(reportsPath).xml --html=$(reportsPath).html --self-contained-html
        displayName: 'Ejecuta pruebas con Pytest'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/reports/*.xml'
          failTaskOnFailedTests: true

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: 'reports'
          artifact: 'TestReports'
        displayName: 'Publica artefactos del reporte'

# Definición de los jobs
build: 
  stage: build
  jobs:
    - template: InstallAndTest

test:
  stage: test
  jobs:
    - template: InstallAndTest

deploy:
  stage: deploy
  jobs:
    - template: InstallAndTest
