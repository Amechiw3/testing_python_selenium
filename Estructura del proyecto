advanced_selenium_project/              #
├── config/                             # Almacena configuraciones específicas de la aplicación o del entorno.
│   ├── config.yaml                     # Archivo central para parámetros globales como la URL base, el navegador predeterminado, etc.
├── drivers/                            # Almacena los binarios de los controladores para los navegadores que usarás en las pruebas, como chromedriver para Chrome o geckodriver para Firefox.
│   ├── chromedriver.exe                #
│   ├── geckodriver.exe                 #   
├── pages/                              # Implementa el Page Object Model (POM). Aquí defines clases para modelar las páginas de tu aplicación, encapsulando los selectores y métodos de interacción.
│   ├── base_page.py                    # Clase base con métodos comunes como find_element, click, o wait_for_element.
├── reports/                            # Almacena los resultados generados por las pruebas, como reportes HTML, capturas de pantalla o logs.
│   ├── html/                           # Archivos HTML de reportes generados por herramientas como pytest-html.
│   │   ├── report.html                 #
│   ├── logs/                           # Archivos de log que registran eventos, errores y resultados de las pruebas.
│   │   ├── test.log                    #
│   ├── screenshots/                    # Capturas de pantalla tomadas durante las pruebas, especialmente útiles para analizar errores.
│       ├── screenshot.png              #
├── tests/                              # Contiene los archivos de prueba que validan las funcionalidades de la aplicación, Esta carpeta suele estar organizada por módulos o funcionalidades.
│   ├── __init__.py                     #
│   ├── conftest.py                     # Configuración global para pruebas, incluyendo fixtures reutilizables (por ejemplo, el driver del navegador o configuraciones de entorno).
├── utils/                              # Contiene funciones y clases reutilizables que no están vinculadas a una página específica.
│   ├── config.py                       # Manejador de configuraciones, como leer un archivo YAML o JSON para parámetros globales.
│   ├── logger.py                       # Configuración y métodos para manejar logs del sistema.
│   ├── wait_utils.py                   # Métodos de espera explícita para manejar elementos dinámicos en las páginas.
├── ci_cd/                              # Archivos para integración continua y despliegue continuo (CI/CD). WIP
│   ├── github_actions.yml              #
├── requirements.txt                    # Lista de dependencias necesarias para el proyecto
├── pytest.ini                          # Archivo de configuración para pytest. Puedes personalizar parámetros como:
├── README.md                           # Documentación del proyecto, que incluye una descripción general, cómo instalar dependencias y ejecutar pruebas.